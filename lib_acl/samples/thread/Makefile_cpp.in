CC = $(MY_ENV_CC)
#CC = g++

CFLAGS = -c -g -W -Wall -Wcast-qual -Wcast-align \
-Waggregate-return -Wno-long-long \
-Wpointer-arith -Werror -Wshadow -O2 \
-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -D_USE_FAST_MACRO

###########################################################
#Check system:
#       Linux, SunOS, Solaris, BSD variants, AIX, HP-UX
SYSLIB = -lpthread
CHECKSYSRES = @echo "Unknow system type!";exit 1
UNIXNAME = $(shell uname -sm)

ifeq ($(CC),)
        CC = gcc
endif

ifeq ($(findstring gcc, $(CC)), gcc)
	CFLAGS += -Wstrict-prototypes
endif

# For FreeBSD
ifeq ($(findstring FreeBSD, $(UNIXNAME)), FreeBSD)
	CFLAGS += -DFREEBSD -D_REENTRANT -pedantic
	SYSLIB += -lcrypt
endif

#Path for Linux
ifeq ($(findstring Linux, $(UNIXNAME)), Linux)
	CFLAGS += -DLINUX2 -D_REENTRANT -pedantic
	SYSLIB += -lcrypt
endif

#Path for SunOS
ifeq ($(findstring SunOS, $(UNIXNAME)), SunOS)
	ifeq ($(findstring 86, $(UNIXNAME)), 86)
		SYSLIB += -lsocket -lnsl -lrt
	endif
	ifeq ($(findstring sun4u, $(UNIXNAME)), sun4u)
		SYSLIB += -lsocket -lnsl -lrt
	endif
	CFLAGS += -DSUNOS5 -D_REENTRANT -pedantic
	SYSLIB += -lcrypt
endif

#Path for HP-UX
ifeq ($(findstring HP-UX, $(UNIXNAME)), HP-UX)
	CFLAGS += -DHP_UX -DHPUX11
	PLAT_NAME=hp-ux
	SYSLIB += -lcrypt
endif

# For Darwin
ifeq ($(findstring Darwin, $(UNIXNAME)), Darwin)
	CFLAGS += -DMACOSX
endif

#Find system type.
ifneq ($(SYSPATH),)
	CHECKSYSRES = @echo "System is $(shell uname -sm)"
endif
###########################################################

ACL_PATH   = ../../../../lib_acl
ACL_INC    = $(ACL_PATH)/include
ACL_LIB    = $(ACL_PATH)/lib

#PROTO_PATH = ../../../../lib_protocol
#PROTO_INC  = $(PROTO_PATH)/include
#PROTO_LIB  = $(PROTO_PATH)/lib

EXTLIBS =
#CFLAGS += -I$(ACL_INC) -I$(PROTO_INC)
#LDFLAGS = -L$(ACL_LIB) -L$(PROTO_LIB) -l_protocol -l_acl $(EXTLIBS) $(SYSLIB)
CFLAGS += -I$(ACL_INC)
LDFLAGS = -L$(ACL_LIB) -l_acl $(EXTLIBS) $(SYSLIB)

###########################################################

OUT_PATH = .
OBJ_PATH = $(OUT_PATH)

#Project's objs
SRC = $(wildcard *.cpp)
OBJ = $(patsubst %.cpp, $(OBJ_PATH)/%.o, $(notdir $(SRC)))
###########################################################

.PHONY = all clean
PROG =

COMPILE = $(CC) $(CFLAGS)

# -Wl,-rpath,$(ACL_LIB) -Wl,-rpath,$(PROTO_LIB) -o $(OBJ_PATH)/$(PROG)
all: RM $(OBJ)
	$(CC) $(OBJ) $(LDFLAGS) -o $(OBJ_PATH)/$(PROG)
	@echo ""
	@echo "All ok! Output:$(PROG)"
	@echo ""
$(OBJ_PATH)/%.o: %.cpp
	$(COMPILE) $< -o $@
RM:
	rm -f $(PROG)
clean:
	rm -f $(PROG)
	rm -f $(OBJ)
###########################################################
